<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:camel="http://camel.apache.org/schema/spring"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
    http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

	<bean id="syncPeerA" class="tools.datasync.basic.sync.SyncPeer"><constructor-arg value="A" /></bean>
	<bean id="syncPeerB" class="tools.datasync.basic.sync.SyncPeer"><constructor-arg value="B" /></bean>

	<bean id="dataSourceA" class="org.apache.derby.jdbc.EmbeddedDataSource">
		<property name="databaseName" value="db-A" />
	</bean>
	<bean id="dataSourceB" class="org.apache.derby.jdbc.EmbeddedDataSource">
		<property name="databaseName" value="db-B" />
	</bean>

	<bean id="beginSenderLatch" class="java.util.concurrent.CountDownLatch">
		<constructor-arg value="2"/>
	</bean>

	<!-- producer template -->
	<camel:template id="a2BSendingTemplate" camelContextId="pumpFactoryACamel" />
	
	<!-- 
	<camel:template id="a2BSendingTemplate" defaultEndpoint="http4:localhost:10010/sync" camelContextId="pumpFactoryACamel" />	
	<camel:template id="b2AReceivingTemplate" defaultEndpoint="http4:localhost:10010/requestB2A" camelContextId="pumpFactoryACamel" />
	 -->
	 
	<!-- 
	<bean id="a2BReceivingTemplate" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass"  ref="pumpFactoryACamel"/>
		<property name="targetMethod" value="createConsumerTemplate"/>
	</bean>
	-->
	
	<bean id="a2BReceivingTemplate"  factory-bean="pumpFactoryACamel" factory-method="createConsumerTemplate" />
	
	<!-- 
	<camel:template id="a2BReceivingTemplate" defaultEndpoint="http4:localhost:10010/request" camelContextId="pumpFactoryACamel" />
	-->
	
	<bean id="peerMe-a2BSenderUri" class="java.lang.String">
		<constructor-arg value="http4:localhost:10010/syncUpdate" />
	</bean>
	<bean id="peerMe-a2BReceiverUri" class="java.lang.String">
		<constructor-arg value="http4:localhost:10010/syncResponse" />	
	</bean>
	
	<bean id="peerMe-b2a-Queue" class="java.util.concurrent.LinkedBlockingQueue" />
	<bean id="peerOther-to-PeerMe-b2a-Transmition-Queue" class="java.util.concurrent.LinkedBlockingQueue" />	
	<bean id="peerOther-b2a-Queue" class="java.util.concurrent.LinkedBlockingQueue" />

	<!-- FIXME: 'a2bSendingQueue' isn't really the right name for this queue -->
	<bean id="a2bSendingQueue" class="tools.datasync.basic.sync.pump.camel.CamelBlockingQueuePollAndPull">
		<constructor-arg ref="peerMe-a2BSenderUri" />
		<constructor-arg ref="peerMe-a2BReceiverUri" />
		<constructor-arg ref="a2BSendingTemplate" />
	</bean>

	<bean id="a2bReceivingQueue" class="java.util.concurrent.LinkedBlockingQueue" />

<!-- 

	<bean id="b2aReceivingQueue" class="tmp.CamelConsumerPollBlockingQueue">
		<constructor-arg ref="a2BReceivingTemplate" />
		<constructor-arg value="http4:localhost:10010/response"  />		
		<constructor-arg ref="peerMe-b2a-Queue" />
	</bean>

	<bean id="b2ASendingQueue" class="tools.datasync.basic.sync.pump.camel.CamelConsumerBlockingQueue">
		<constructor-arg ref="a2BReceivingTemplate" />
		<constructor-arg value="http4:localhost:10010/responseB2A"  />		
		<constructor-arg ref="b2aQueue" />
	</bean>

	<bean id="b2aReceivingQueue" class="tools.datasync.basic.sync.pump.camel.CamelProducerBlockingQueue">
		<constructor-arg ref="b2AReceivingTemplate" />
		<constructor-arg ref="b2aQueue" />
	</bean>
 -->

	<bean id="peerMe" class="tools.datasync.basic.sync.pump.JvmSyncPeerParms">
		<constructor-arg ref="syncPeerA"/>
		<constructor-arg ref="a2bSendingQueue"/>
		<!-- 
		<constructor-arg ref="a2bQueue" />		
		 -->
		<constructor-arg ref="nextEntityArrayListA" />		 
	</bean>
	
	<bean id="peerOther" class="tools.datasync.basic.sync.pump.JvmSyncPeerParms">
		<constructor-arg ref="syncPeerB"/>
		<constructor-arg ref="peerOther-b2a-Queue"/>
		<!-- 
		<constructor-arg ref="b2aQueue"/>
		 -->
		<constructor-arg ref="nextEntityArrayListB" />		 
	</bean>

	<bean id="pairA" class="tools.datasync.basic.sync.pump.JvmSyncPair">
		<constructor-arg ref="peerMe"/>
		<constructor-arg ref="peerOther"/>	
	</bean>
	<bean id="pairB" class="tools.datasync.basic.sync.pump.JvmSyncPair">
		<constructor-arg ref="peerOther"/>
		<constructor-arg ref="peerMe"/>		
	</bean>

	<util:map id="entityNameIdMap">
		<entry key="org.Contact" value="A157CC02-CC87-4296-947B-613CAABBDB40" />
		<entry key="org.ContactLink" value="38C11B8D-E4F8-410A-B009-0EF8654A4681" />
		<entry key="org.WorkHistory" value="48E2F8D3-2A90-4A26-A198-ED649A4EFBA1" />
	</util:map>

	<bean id="entityGetter" class="tools.datasync.basic.model.EntityGetterImpl">
		<constructor-arg value="seed.SyncState"/>	
		<constructor-arg ref="entityNameIdMap"/>		
	</bean>
	
	<bean id="sampleAppTableNameGetter" class="tools.datasync.core.sampleapp.SampleAppTableNameGetter" />
	
	<bean id="sourceDao" class="tools.datasync.basic.dao.GenericJDBCDao">
		<constructor-arg ref="dataSourceA"/>
		<constructor-arg value="db-A"/>
		<constructor-arg ref="entityGetter" />
		<constructor-arg ref="sampleAppTableNameGetter"/>
	</bean>
	
	<bean id="targetDao" class="tools.datasync.basic.dao.GenericJDBCDao">
		<constructor-arg ref="dataSourceB"/>
		<constructor-arg value="db-B"/>
		<constructor-arg ref="entityGetter" />
		<constructor-arg ref="sampleAppTableNameGetter"/>
	</bean>
	
	<bean id="seedConsumerFactory" class="tools.datasync.basic.seed.DbSeedConsumerFactory">
		<constructor-arg ref="entityGetter" />
		<constructor-arg ref="sampleAppTableNameGetter"/>	
	</bean>
	
	<bean id="initiatorWinsConflictResolverFactor" class="tools.datasync.basic.logic.InitiatorWinsConflictResolverFactory" />
	
	<bean id="daoPairA" class="tools.datasync.basic.dao.SyncPairConfig">
		<constructor-arg ref="sourceDao" />
		<constructor-arg ref="targetDao" />
		<constructor-arg ref="seedConsumerFactory" />
		<constructor-arg ref="initiatorWinsConflictResolverFactor" />		
	</bean>
	<bean id="daoPairB" class="tools.datasync.basic.dao.SyncPairConfig">
		<constructor-arg ref="targetDao" />
		<constructor-arg ref="sourceDao" />
		<constructor-arg ref="seedConsumerFactory" />
		<constructor-arg ref="initiatorWinsConflictResolverFactor" />		
	</bean>

	<bean id="stopper" class="java.util.concurrent.atomic.AtomicBoolean">
		<constructor-arg value="false" />
	</bean>

	<util:list id="nextEntityArrayListA" list-class="java.util.concurrent.CopyOnWriteArrayList" value-type="java.lang.String" />
	<util:list id="nextEntityArrayListB" list-class="java.util.concurrent.CopyOnWriteArrayList" value-type="java.lang.String" />

	<bean id="java.util.concurrent.TimeUnit.SECONDS"
		class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean"/>

	<bean id="timeSpan" class="tools.datasync.basic.util.TimeSpan">
		<constructor-arg index="0" value="1" />
		<constructor-arg index="1" ref="java.util.concurrent.TimeUnit.SECONDS" />
	</bean>
 
	<bean id="nextEntityAwaiterA2B" class="tools.datasync.basic.sync.pump.NextEntityAwaiter">
		<constructor-arg ref="nextEntityArrayListA" />
		<constructor-arg ref="stopper" />
		<constructor-arg ref="timeSpan" />
		<constructor-arg ref="a2bSendingQueue" />
	</bean>

	<bean id="nextEntityAwaiterB2A" class="tools.datasync.basic.sync.pump.NextEntityAwaiter">
		<constructor-arg ref="nextEntityArrayListB" />
		<constructor-arg ref="stopper" />
		<constructor-arg ref="timeSpan" />
		<constructor-arg ref="peerOther-b2a-Queue" />
	</bean>

<!--
	<bean id="concurArgs" class="tools.datasync.basic.sync.pump.JvmSyncConcurArgs">
		<constructor-arg ref="stopper" />
		<constructor-arg ref="beginSenderLatch" />
		<constructor-arg ref="nextEntityArrayList" />		
	</bean>
-->

	<bean id="nextEntitySignalerA2B" class="tools.datasync.basic.sync.pump.camel.CamelPutNextEntitySignaler">
		<constructor-arg value="http4:localhost:10010/syncUpdate" />
		<constructor-arg ref="a2BSendingTemplate" />
	</bean>
	
	<bean id="nextEntitySignalerB2A" class="tools.datasync.basic.sync.pump.BlockingQueueNextEntitySignaler">
		<constructor-arg ref="peerOther-to-PeerMe-b2a-Transmition-Queue" />	
	</bean>

	<bean id="concurArgsA2B" class="tools.datasync.basic.sync.pump.JvmSyncConcurArgs">
		<constructor-arg ref="stopper" />
		<constructor-arg ref="beginSenderLatch" />
		<constructor-arg ref="nextEntityAwaiterA2B" />
		<constructor-arg ref="nextEntitySignalerA2B" />
	</bean>

	<bean id="concurArgsB2A" class="tools.datasync.basic.sync.pump.JvmSyncConcurArgs">
		<constructor-arg ref="stopper" />
		<constructor-arg ref="beginSenderLatch" />
		<constructor-arg ref="nextEntityAwaiterB2A" />
		<constructor-arg ref="nextEntitySignalerB2A" />		
	</bean>

	<util:list id="tables">
	    <value>org.Contact</value>
<!-- 	    <value>org.Organization</value>  -->
	    <value>org.WorkHistory</value>
	    <value>org.ContactLink</value>
	</util:list>
	
	<bean id="sampleSyncIdGetter" class="tools.datasync.core.sampleapp.SampleSyncIdGetter">
		<constructor-arg ref="entityGetter" />
	</bean>
	
	<bean id="syncStateInitializerA" class="tools.datasync.basic.dao.JdbcSyncStateInitializer">
		<constructor-arg ref="tables"/>
		<constructor-arg ref="entityGetter" />
		<constructor-arg ref="sampleSyncIdGetter"/>		
		<constructor-arg ref="sourceDao"/>
	</bean>

	<bean id="syncStateInitializerB" class="tools.datasync.basic.dao.JdbcSyncStateInitializer">
		<constructor-arg ref="tables"/>
		<constructor-arg ref="entityGetter" />
		<constructor-arg ref="sampleSyncIdGetter"/>		
		<constructor-arg ref="targetDao"/>
	</bean>	
	
	<camel:camelContext id="pumpFactoryACamel">
	  <camel:route>
	    <camel:from uri="direct:start"/>	    
	    <camel:to uri="http4:localhost:10010/request"/>
	  </camel:route>	  
	</camel:camelContext>

	<camel:camelContext id="pumpFactoryBCamelRequest">
	  <camel:route>
	    <camel:from uri="jetty:http://localhost:10010/syncUpdate"/>
	    <camel:process ref="a2B-HttpUpdateProcessor" />
	  </camel:route>
	</camel:camelContext>

	<camel:camelContext id="pumpFactoryBCamelResponse">
	  <camel:route>
	    <camel:from uri="jetty:http://localhost:10010/syncResponse"/>
	    <camel:process ref="b2A-HttpResponseProcessor" />
	  </camel:route>
	</camel:camelContext>

	<bean id="pumpFactoryA" class="tools.datasync.basic.sync.pump.JvmSyncPumpFactory">
		<constructor-arg ref="pairA"/>
		<constructor-arg ref="daoPairA"/>
		<constructor-arg ref="syncStateInitializerA"/>
		<constructor-arg ref="concurArgsA2B"/>
	</bean>
	
	<!-- 
	<bean id="a2B-HttpProcessor" class="tools.datasync.basic.sync.pump.camel.CamelRequestProcessor">
		<constructor-arg ref="b2aQueue" />
	</bean>
	 -->

<!-- 
	<bean id="nullQueue" class="java.util.concurrent.LinkedBlockingQueue" />
	
	<bean id="a2B-HttpResponseProcessor" class="tools.datasync.basic.sync.pump.camel.CamelResponseProcessor">
		<constructor-arg ref="b2aQueue" />
	</bean>

	<bean id="b2A-HttpProcessor" class="tools.datasync.basic.sync.pump.camel.CamelRequestProcessor">
		<constructor-arg ref="b2aQueue" />
	</bean>
-->
	<bean id="a2B-HttpUpdateProcessor" class="tools.datasync.basic.sync.pump.camel.CamelRequestProcessor">
		<constructor-arg ref="a2bReceivingQueue" />
	</bean>

	<bean id="b2A-HttpResponseProcessor" class="tools.datasync.basic.sync.pump.camel.CamelResponseProcessor">
		<constructor-arg ref="peerOther-to-PeerMe-b2a-Transmition-Queue" />
	</bean>

	<bean id="pumpFactoryB" class="tools.datasync.basic.sync.pump.JvmSyncPumpFactory">
		<constructor-arg ref="pairB"/>
		<constructor-arg ref="daoPairB"/>
		<constructor-arg ref="syncStateInitializerB"/>
		<constructor-arg ref="concurArgsB2A"/>
	</bean>

	<bean id="syncOrchMgr" class="tools.datasync.basic.sync.SyncOrchestrationManager">
		<constructor-arg ref="pumpFactoryA"/>
		<constructor-arg ref="pumpFactoryB"/>
	</bean>

</beans>
